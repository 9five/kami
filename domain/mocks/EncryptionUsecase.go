// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// EncryptionUsecase is an autogenerated mock type for the EncryptionUsecase type
type EncryptionUsecase struct {
	mock.Mock
}

// CheckPwHash provides a mock function with given fields: ctx, password, hash
func (_m *EncryptionUsecase) CheckPwHash(ctx context.Context, password string, hash string) bool {
	ret := _m.Called(ctx, password, hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, password, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DesDecrypt provides a mock function with given fields: ctx, text
func (_m *EncryptionUsecase) DesDecrypt(ctx context.Context, text string) (string, error) {
	ret := _m.Called(ctx, text)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, text)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DesEncrypt provides a mock function with given fields: ctx, text
func (_m *EncryptionUsecase) DesEncrypt(ctx context.Context, text string) (string, error) {
	ret := _m.Called(ctx, text)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, text)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashPassword provides a mock function with given fields: ctx, password
func (_m *EncryptionUsecase) HashPassword(ctx context.Context, password string) (string, error) {
	ret := _m.Called(ctx, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEncryptionUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewEncryptionUsecase creates a new instance of EncryptionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEncryptionUsecase(t mockConstructorTestingTNewEncryptionUsecase) *EncryptionUsecase {
	mock := &EncryptionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
