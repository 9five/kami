// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "kami/domain"

	mock "github.com/stretchr/testify/mock"
)

// PrizePoolRepository is an autogenerated mock type for the PrizePoolRepository type
type PrizePoolRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, prizePool, optsWhere
func (_m *PrizePoolRepository) Get(ctx context.Context, prizePool *domain.PrizePool, optsWhere ...map[string]interface{}) (*domain.PrizePool, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prizePool)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.PrizePool
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizePool, ...map[string]interface{}) *domain.PrizePool); ok {
		r0 = rf(ctx, prizePool, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PrizePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizePool, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, prizePool, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Gets provides a mock function with given fields: ctx, prizePool, optsWhere
func (_m *PrizePoolRepository) Gets(ctx context.Context, prizePool *domain.PrizePool, optsWhere ...map[string]interface{}) ([]*domain.PrizePool, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prizePool)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*domain.PrizePool
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizePool, ...map[string]interface{}) []*domain.PrizePool); ok {
		r0 = rf(ctx, prizePool, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PrizePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizePool, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, prizePool, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, prizePool
func (_m *PrizePoolRepository) New(ctx context.Context, prizePool *domain.PrizePool) (*domain.PrizePool, error) {
	ret := _m.Called(ctx, prizePool)

	var r0 *domain.PrizePool
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizePool) *domain.PrizePool); ok {
		r0 = rf(ctx, prizePool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PrizePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizePool) error); ok {
		r1 = rf(ctx, prizePool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPrizePoolRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrizePoolRepository creates a new instance of PrizePoolRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrizePoolRepository(t mockConstructorTestingTNewPrizePoolRepository) *PrizePoolRepository {
	mock := &PrizePoolRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
