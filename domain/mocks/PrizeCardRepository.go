// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "kami/domain"

	mock "github.com/stretchr/testify/mock"
)

// PrizeCardRepository is an autogenerated mock type for the PrizeCardRepository type
type PrizeCardRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, prizeCard, optsWhere
func (_m *PrizeCardRepository) Get(ctx context.Context, prizeCard *domain.PrizeCard, optsWhere ...map[string]interface{}) (*domain.PrizeCard, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prizeCard)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.PrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizeCard, ...map[string]interface{}) *domain.PrizeCard); ok {
		r0 = rf(ctx, prizeCard, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizeCard, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, prizeCard, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoupon provides a mock function with given fields: ctx, coupon, optsWhere
func (_m *PrizeCardRepository) GetCoupon(ctx context.Context, coupon *domain.Coupon, optsWhere ...map[string]interface{}) (*domain.Coupon, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, coupon)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.Coupon
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Coupon, ...map[string]interface{}) *domain.Coupon); ok {
		r0 = rf(ctx, coupon, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Coupon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Coupon, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, coupon, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPrizeCard provides a mock function with given fields: ctx, userPrizeCard, optsWhere
func (_m *PrizeCardRepository) GetUserPrizeCard(ctx context.Context, userPrizeCard *domain.UserPrizeCard, optsWhere ...map[string]interface{}) (*domain.UserPrizeCard, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userPrizeCard)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.UserPrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserPrizeCard, ...map[string]interface{}) *domain.UserPrizeCard); ok {
		r0 = rf(ctx, userPrizeCard, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserPrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserPrizeCard, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, userPrizeCard, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPrizeCardList provides a mock function with given fields: ctx, userPrizeCard, optsWhere
func (_m *PrizeCardRepository) GetUserPrizeCardList(ctx context.Context, userPrizeCard *domain.UserPrizeCard, optsWhere ...map[string]interface{}) ([]*domain.UserPrizeCard, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userPrizeCard)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*domain.UserPrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserPrizeCard, ...map[string]interface{}) []*domain.UserPrizeCard); ok {
		r0 = rf(ctx, userPrizeCard, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.UserPrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserPrizeCard, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, userPrizeCard, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Gets provides a mock function with given fields: ctx, prizeCard, optsWhere
func (_m *PrizeCardRepository) Gets(ctx context.Context, prizeCard *domain.PrizeCard, optsWhere ...map[string]interface{}) ([]*domain.PrizeCard, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prizeCard)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*domain.PrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizeCard, ...map[string]interface{}) []*domain.PrizeCard); ok {
		r0 = rf(ctx, prizeCard, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizeCard, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, prizeCard, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, prizeCard
func (_m *PrizeCardRepository) New(ctx context.Context, prizeCard *domain.PrizeCard) (*domain.PrizeCard, error) {
	ret := _m.Called(ctx, prizeCard)

	var r0 *domain.PrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizeCard) *domain.PrizeCard); ok {
		r0 = rf(ctx, prizeCard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizeCard) error); ok {
		r1 = rf(ctx, prizeCard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserPrizeCard provides a mock function with given fields: ctx, userPrizeCard
func (_m *PrizeCardRepository) NewUserPrizeCard(ctx context.Context, userPrizeCard *domain.UserPrizeCard) (*domain.UserPrizeCard, error) {
	ret := _m.Called(ctx, userPrizeCard)

	var r0 *domain.UserPrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserPrizeCard) *domain.UserPrizeCard); ok {
		r0 = rf(ctx, userPrizeCard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserPrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserPrizeCard) error); ok {
		r1 = rf(ctx, userPrizeCard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCoupon provides a mock function with given fields: ctx, coupon
func (_m *PrizeCardRepository) UpdateCoupon(ctx context.Context, coupon *domain.Coupon) error {
	ret := _m.Called(ctx, coupon)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Coupon) error); ok {
		r0 = rf(ctx, coupon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPrizeCardRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrizeCardRepository creates a new instance of PrizeCardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrizeCardRepository(t mockConstructorTestingTNewPrizeCardRepository) *PrizeCardRepository {
	mock := &PrizeCardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
