// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "kami/domain"

	mock "github.com/stretchr/testify/mock"
)

// KamiUserRepository is an autogenerated mock type for the KamiUserRepository type
type KamiUserRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, user, optsWhere
func (_m *KamiUserRepository) Get(ctx context.Context, user *domain.KamiUser, optsWhere ...map[string]interface{}) (*domain.KamiUser, error) {
	_va := make([]interface{}, len(optsWhere))
	for _i := range optsWhere {
		_va[_i] = optsWhere[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *domain.KamiUser
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser, ...map[string]interface{}) *domain.KamiUser); ok {
		r0 = rf(ctx, user, optsWhere...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.KamiUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUser, ...map[string]interface{}) error); ok {
		r1 = rf(ctx, user, optsWhere...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLog provides a mock function with given fields: ctx, log
func (_m *KamiUserRepository) GetLog(ctx context.Context, log *domain.KamiUserLog) (*domain.KamiUserLog, error) {
	ret := _m.Called(ctx, log)

	var r0 *domain.KamiUserLog
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUserLog) *domain.KamiUserLog); ok {
		r0 = rf(ctx, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.KamiUserLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUserLog) error); ok {
		r1 = rf(ctx, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, user
func (_m *KamiUserRepository) New(ctx context.Context, user *domain.KamiUser) (*domain.KamiUser, error) {
	ret := _m.Called(ctx, user)

	var r0 *domain.KamiUser
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser) *domain.KamiUser); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.KamiUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLog provides a mock function with given fields: ctx, log
func (_m *KamiUserRepository) NewLog(ctx context.Context, log *domain.KamiUserLog) (*domain.KamiUserLog, error) {
	ret := _m.Called(ctx, log)

	var r0 *domain.KamiUserLog
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUserLog) *domain.KamiUserLog); ok {
		r0 = rf(ctx, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.KamiUserLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUserLog) error); ok {
		r1 = rf(ctx, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, user
func (_m *KamiUserRepository) Update(ctx context.Context, user *domain.KamiUser) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLog provides a mock function with given fields: ctx, log
func (_m *KamiUserRepository) UpdateLog(ctx context.Context, log *domain.KamiUserLog) error {
	ret := _m.Called(ctx, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUserLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKamiUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewKamiUserRepository creates a new instance of KamiUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKamiUserRepository(t mockConstructorTestingTNewKamiUserRepository) *KamiUserRepository {
	mock := &KamiUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
