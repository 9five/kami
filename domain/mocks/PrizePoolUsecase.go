// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "kami/domain"

	mock "github.com/stretchr/testify/mock"
)

// PrizePoolUsecase is an autogenerated mock type for the PrizePoolUsecase type
type PrizePoolUsecase struct {
	mock.Mock
}

// GetPrizePool provides a mock function with given fields: ctx, prizePool
func (_m *PrizePoolUsecase) GetPrizePool(ctx context.Context, prizePool *domain.PrizePool) (*domain.PrizePool, error) {
	ret := _m.Called(ctx, prizePool)

	var r0 *domain.PrizePool
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizePool) *domain.PrizePool); ok {
		r0 = rf(ctx, prizePool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PrizePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizePool) error); ok {
		r1 = rf(ctx, prizePool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrizePoolList provides a mock function with given fields: ctx, prizePool
func (_m *PrizePoolUsecase) GetPrizePoolList(ctx context.Context, prizePool *domain.PrizePool) ([]*domain.PrizePool, error) {
	ret := _m.Called(ctx, prizePool)

	var r0 []*domain.PrizePool
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizePool) []*domain.PrizePool); ok {
		r0 = rf(ctx, prizePool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PrizePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizePool) error); ok {
		r1 = rf(ctx, prizePool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubtractUserPoints provides a mock function with given fields: ctx, user, prizePool
func (_m *PrizePoolUsecase) SubtractUserPoints(ctx context.Context, user *domain.KamiUser, prizePool *domain.PrizePool) error {
	ret := _m.Called(ctx, user, prizePool)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser, *domain.PrizePool) error); ok {
		r0 = rf(ctx, user, prizePool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPrizePoolUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrizePoolUsecase creates a new instance of PrizePoolUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrizePoolUsecase(t mockConstructorTestingTNewPrizePoolUsecase) *PrizePoolUsecase {
	mock := &PrizePoolUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
