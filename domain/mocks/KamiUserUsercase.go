// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "kami/domain"

	mock "github.com/stretchr/testify/mock"
)

// KamiUserUsercase is an autogenerated mock type for the KamiUserUsercase type
type KamiUserUsercase struct {
	mock.Mock
}

// CheckKamiUserLog provides a mock function with given fields: ctx, log
func (_m *KamiUserUsercase) CheckKamiUserLog(ctx context.Context, log *domain.KamiUserLog) error {
	ret := _m.Called(ctx, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUserLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateToken provides a mock function with given fields: ctx, user
func (_m *KamiUserUsercase) GenerateToken(ctx context.Context, user *domain.KamiUser) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKamiUser provides a mock function with given fields: ctx, user
func (_m *KamiUserUsercase) GetKamiUser(ctx context.Context, user *domain.KamiUser) (*domain.KamiUser, error) {
	ret := _m.Called(ctx, user)

	var r0 *domain.KamiUser
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser) *domain.KamiUser); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.KamiUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKamiUserLog provides a mock function with given fields: ctx, log
func (_m *KamiUserUsercase) GetKamiUserLog(ctx context.Context, log *domain.KamiUserLog) (*domain.KamiUserLog, error) {
	ret := _m.Called(ctx, log)

	var r0 *domain.KamiUserLog
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUserLog) *domain.KamiUserLog); ok {
		r0 = rf(ctx, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.KamiUserLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUserLog) error); ok {
		r1 = rf(ctx, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginKamiUser provides a mock function with given fields: ctx, input
func (_m *KamiUserUsercase) LoginKamiUser(ctx context.Context, input *domain.KamiUser) (*domain.KamiUser, error) {
	ret := _m.Called(ctx, input)

	var r0 *domain.KamiUser
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser) *domain.KamiUser); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.KamiUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUser) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKamiUser provides a mock function with given fields: ctx, user
func (_m *KamiUserUsercase) NewKamiUser(ctx context.Context, user *domain.KamiUser) (*domain.KamiUser, error) {
	ret := _m.Called(ctx, user)

	var r0 *domain.KamiUser
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser) *domain.KamiUser); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.KamiUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.KamiUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKamiUser provides a mock function with given fields: ctx, user
func (_m *KamiUserUsercase) UpdateKamiUser(ctx context.Context, user *domain.KamiUser) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKamiUserLog provides a mock function with given fields: ctx, log
func (_m *KamiUserUsercase) UpdateKamiUserLog(ctx context.Context, log *domain.KamiUserLog) error {
	ret := _m.Called(ctx, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUserLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserInfo provides a mock function with given fields: ctx, user, userInput
func (_m *KamiUserUsercase) UpdateUserInfo(ctx context.Context, user *domain.KamiUser, userInput *domain.KamiUserInput) error {
	ret := _m.Called(ctx, user, userInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.KamiUser, *domain.KamiUserInput) error); ok {
		r0 = rf(ctx, user, userInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKamiUserUsercase interface {
	mock.TestingT
	Cleanup(func())
}

// NewKamiUserUsercase creates a new instance of KamiUserUsercase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKamiUserUsercase(t mockConstructorTestingTNewKamiUserUsercase) *KamiUserUsercase {
	mock := &KamiUserUsercase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
