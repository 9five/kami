// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "kami/domain"

	mock "github.com/stretchr/testify/mock"
)

// PrizeCardUsecase is an autogenerated mock type for the PrizeCardUsecase type
type PrizeCardUsecase struct {
	mock.Mock
}

// Draw provides a mock function with given fields: ctx, userId, prizeCardList
func (_m *PrizeCardUsecase) Draw(ctx context.Context, userId uint, prizeCardList []*domain.PrizeCard) (*domain.PrizeCardOutput, error) {
	ret := _m.Called(ctx, userId, prizeCardList)

	var r0 *domain.PrizeCardOutput
	if rf, ok := ret.Get(0).(func(context.Context, uint, []*domain.PrizeCard) *domain.PrizeCardOutput); ok {
		r0 = rf(ctx, userId, prizeCardList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PrizeCardOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, []*domain.PrizeCard) error); ok {
		r1 = rf(ctx, userId, prizeCardList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrizeCard provides a mock function with given fields: ctx, prizeCard
func (_m *PrizeCardUsecase) GetPrizeCard(ctx context.Context, prizeCard *domain.PrizeCard) (*domain.PrizeCard, error) {
	ret := _m.Called(ctx, prizeCard)

	var r0 *domain.PrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizeCard) *domain.PrizeCard); ok {
		r0 = rf(ctx, prizeCard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizeCard) error); ok {
		r1 = rf(ctx, prizeCard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrizeCardCollection provides a mock function with given fields: ctx, userId, prizePool
func (_m *PrizeCardUsecase) GetPrizeCardCollection(ctx context.Context, userId uint, prizePool *domain.PrizePool) (*domain.PrizeCardCollection, error) {
	ret := _m.Called(ctx, userId, prizePool)

	var r0 *domain.PrizeCardCollection
	if rf, ok := ret.Get(0).(func(context.Context, uint, *domain.PrizePool) *domain.PrizeCardCollection); ok {
		r0 = rf(ctx, userId, prizePool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PrizeCardCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, *domain.PrizePool) error); ok {
		r1 = rf(ctx, userId, prizePool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrizeCardCollectionDetail provides a mock function with given fields: ctx, userPrizeCard
func (_m *PrizeCardUsecase) GetPrizeCardCollectionDetail(ctx context.Context, userPrizeCard *domain.UserPrizeCard) (string, *domain.Coupon, *domain.PrizeCard, error) {
	ret := _m.Called(ctx, userPrizeCard)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserPrizeCard) string); ok {
		r0 = rf(ctx, userPrizeCard)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *domain.Coupon
	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserPrizeCard) *domain.Coupon); ok {
		r1 = rf(ctx, userPrizeCard)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Coupon)
		}
	}

	var r2 *domain.PrizeCard
	if rf, ok := ret.Get(2).(func(context.Context, *domain.UserPrizeCard) *domain.PrizeCard); ok {
		r2 = rf(ctx, userPrizeCard)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*domain.PrizeCard)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, *domain.UserPrizeCard) error); ok {
		r3 = rf(ctx, userPrizeCard)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetPrizeCardList provides a mock function with given fields: ctx, prizeCard
func (_m *PrizeCardUsecase) GetPrizeCardList(ctx context.Context, prizeCard *domain.PrizeCard) ([]*domain.PrizeCard, error) {
	ret := _m.Called(ctx, prizeCard)

	var r0 []*domain.PrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PrizeCard) []*domain.PrizeCard); ok {
		r0 = rf(ctx, prizeCard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PrizeCard) error); ok {
		r1 = rf(ctx, prizeCard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeightedRandomList provides a mock function with given fields: ctx, userId, prizeCardList
func (_m *PrizeCardUsecase) GetWeightedRandomList(ctx context.Context, userId uint, prizeCardList []*domain.PrizeCard) ([]*domain.PrizeCard, error) {
	ret := _m.Called(ctx, userId, prizeCardList)

	var r0 []*domain.PrizeCard
	if rf, ok := ret.Get(0).(func(context.Context, uint, []*domain.PrizeCard) []*domain.PrizeCard); ok {
		r0 = rf(ctx, userId, prizeCardList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PrizeCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, []*domain.PrizeCard) error); ok {
		r1 = rf(ctx, userId, prizeCardList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPrizeCardUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrizeCardUsecase creates a new instance of PrizeCardUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrizeCardUsecase(t mockConstructorTestingTNewPrizeCardUsecase) *PrizeCardUsecase {
	mock := &PrizeCardUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
